// Generated by view binder compiler. Do not edit!
package com.nightroll.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.nightroll.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityBarDetailsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton btnDirections;

  @NonNull
  public final ImageView imageBar;

  @NonNull
  public final RecyclerView recyclerWeeklyVibe;

  @NonNull
  public final TextView textBarAddress;

  @NonNull
  public final TextView textBarName;

  @NonNull
  public final TextView textBarType;

  @NonNull
  public final Toolbar toolbar;

  private ActivityBarDetailsBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton btnDirections, @NonNull ImageView imageBar,
      @NonNull RecyclerView recyclerWeeklyVibe, @NonNull TextView textBarAddress,
      @NonNull TextView textBarName, @NonNull TextView textBarType, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.btnDirections = btnDirections;
    this.imageBar = imageBar;
    this.recyclerWeeklyVibe = recyclerWeeklyVibe;
    this.textBarAddress = textBarAddress;
    this.textBarName = textBarName;
    this.textBarType = textBarType;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityBarDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityBarDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_bar_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityBarDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_directions;
      MaterialButton btnDirections = ViewBindings.findChildViewById(rootView, id);
      if (btnDirections == null) {
        break missingId;
      }

      id = R.id.image_bar;
      ImageView imageBar = ViewBindings.findChildViewById(rootView, id);
      if (imageBar == null) {
        break missingId;
      }

      id = R.id.recycler_weekly_vibe;
      RecyclerView recyclerWeeklyVibe = ViewBindings.findChildViewById(rootView, id);
      if (recyclerWeeklyVibe == null) {
        break missingId;
      }

      id = R.id.text_bar_address;
      TextView textBarAddress = ViewBindings.findChildViewById(rootView, id);
      if (textBarAddress == null) {
        break missingId;
      }

      id = R.id.text_bar_name;
      TextView textBarName = ViewBindings.findChildViewById(rootView, id);
      if (textBarName == null) {
        break missingId;
      }

      id = R.id.text_bar_type;
      TextView textBarType = ViewBindings.findChildViewById(rootView, id);
      if (textBarType == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityBarDetailsBinding((CoordinatorLayout) rootView, btnDirections, imageBar,
          recyclerWeeklyVibe, textBarAddress, textBarName, textBarType, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
